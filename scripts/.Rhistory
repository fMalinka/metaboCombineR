elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
c(11,12,13,NA,14,12) == 12
which(c(11,12,13,NA,14,12) == 12)
bin <- seq(trunc(min(elutionRT)), trunc(max(elutionRT))+1, by = 2)
#check elution order
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+10]
id <- i + which(rt[i:length(rt)] < rt[i]+10)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
hist(elutionIndex)
hh <- hist(elutionIndex, breaks = seq(4,3626, length.out = 100))
hh
hist(elutionRT, breaks = seq(trunc(min(elutionRT)), trunc(max(elutionRT))+1, by = 2))
hist(elutionRT, breaks = seq(trunc(min(elutionRT)), trunc(max(elutionRT))+2, by = 2))
sortMzByRt <- function(data)
{
mzs <- trunc(as.numeric(regmatches(rownames(data), regexpr("\\d+(\\.\\d+)?",rownames(data), perl=TRUE)))*100)/100
rts <- as.numeric(substring(regmatches(rownames(data), regexpr("T\\d+(\\.\\d+)?",rownames(data), perl=TRUE)),2))
rtsOrder <- order(rts)
newdata <- data[rtsOrder,]
newdata <- cbind(newdata, RT= rts[rtsOrder])
newdata <- cbind(newdata, MZ= mzs[rtsOrder])
return(as.matrix(newdata))
}
mzb1 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_wnorm_1.csv", row.names = 1, stringsAsFactors = FALSE)
mzb2  <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/v2/mzb1v2_b.csv", row.names = 1)
mzb3 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_norm_3.csv", row.names = 1)
#mzb4 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_norm_4.csv", row.names = 1)
mzb1 <- mzb1[-1,]
mzb1_1 <- apply(mzb1, 2, as.numeric)
rownames(mzb1_1) <- rownames(mzb1)
mzb1 <- mzb1_1
hist(rt1, breaks = seq(trunc(min(elutionRT)), trunc(max(elutionRT))+2, by = 2))
sortMzByRt <- function(data)
{
mzs <- trunc(as.numeric(regmatches(rownames(data), regexpr("\\d+(\\.\\d+)?",rownames(data), perl=TRUE)))*100)/100
rts <- as.numeric(substring(regmatches(rownames(data), regexpr("T\\d+(\\.\\d+)?",rownames(data), perl=TRUE)),2))
rtsOrder <- order(rts)
newdata <- data[rtsOrder,]
newdata <- cbind(newdata, RT= rts[rtsOrder])
newdata <- cbind(newdata, MZ= mzs[rtsOrder])
return(as.matrix(newdata))
}
mzb1 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_wnorm_1.csv", row.names = 1, stringsAsFactors = FALSE)
mzb2  <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/v2/mzb1v2_b.csv", row.names = 1)
mzb3 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_norm_3.csv", row.names = 1)
#mzb4 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_norm_4.csv", row.names = 1)
mzb1 <- mzb1[-1,]
mzb1_1 <- apply(mzb1, 2, as.numeric)
rownames(mzb1_1) <- rownames(mzb1)
mzb1 <- mzb1_1
mzb1sort <- sortMzByRt(mzb1)
rt1 <- mzb1sort[, "RT"]
subrt10 <- rt1[rt1 < 150 ]
subrt10
hist(subrt10, breaks = seq(96, 150))
hist(rt1, breaks = seq(trunc(min(elutionRT)), trunc(max(elutionRT))+2, by = 2))
seq(trunc(min(elutionRT)), trunc(max(elutionRT))+2, by = 2)
seq(trunc(min(elutionRT)), trunc(max(elutionRT))+4, by = 2)
seq(trunc(min(elutionRT)), trunc(max(elutionRT))+6, by = 2)
#check elution order
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+10]
id <- i + which(rt[i:length(rt)] < rt[i]+10)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
hist(elutionIndex)
hh <- hist(elutionIndex, breaks = seq(4,3626, length.out = 100))
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+1]
id <- i + which(rt[i:length(rt)] < rt[i]+1)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+5]
id <- i + which(rt[i:length(rt)] < rt[i]+5)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+10]
id <- i + which(rt[i:length(rt)] < rt[i]+10)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
#check elution order
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+10]
id <- i + which(rt[i:length(rt)] < rt[i]+10)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
#check elution order
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+5]
id <- i + which(rt[i:length(rt)] < rt[i]+5)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
#check elution order
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+2]
id <- i + which(rt[i:length(rt)] < rt[i]+2)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
#check elution order
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+1]
id <- i + which(rt[i:length(rt)] < rt[i]+1)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
help.start()
example("foo")
data()
library()
a <- c(1,2,3)
(a <- c(1,2,3))
?with
0.1 == 0.3/3
0.3/3
all.equal(0.1 == 0.3/3)
all.equal(0.1, 0.3/3)
?all.equal
isTRUE()
?isTRUE
?all
a <- c(1,2,3,)
a <- c(1,2,3,5)
a[[5]]
a[3]
x <- 1:5
ifelse(x > 3, TRUE, FALSE)
pmax(1:5, 6:2)
3 == 3 && 2 == 2
3 == 3 & 2 == 2
c(1,2,3) == c(1,2,4)
c(1,2,3) == c(1,2)
c(1,2,3) == c(1,2,3)
c(1,2,3) && c(1,2,3)
c(1,2,3) & c(1,2,3)
c(1,2,3) & c(1,2,3,4)
c(1,2,3) && c(1,2,3,4)
c(1,2,3,5) && c(1,2,3,4)
c(1,2,3,5) & c(1,2,3,4)
c(1,2,3,5,0) & c(1,2,3,4,0)
?pmax
weirdFun()()()
sortMzByRt <- function(data)
{
mzs <- trunc(as.numeric(regmatches(rownames(data), regexpr("\\d+(\\.\\d+)?",rownames(data), perl=TRUE)))*100)/100
rts <- as.numeric(substring(regmatches(rownames(data), regexpr("T\\d+(\\.\\d+)?",rownames(data), perl=TRUE)),2))
rtsOrder <- order(rts)
newdata <- data[rtsOrder,]
newdata <- cbind(newdata, RT= rts[rtsOrder])
newdata <- cbind(newdata, MZ= mzs[rtsOrder])
return(as.matrix(newdata))
}
#check elution order - zarovnani mezi mzb1 a mzb2
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
binSize <- 10
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+binSize]
id <- i + which(rt[i:length(rt)] < rt[i]+binSize)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
#MZB1
mzb1 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_wnorm_1.csv", row.names = 1, stringsAsFactors = FALSE)
mzb1 <- mzb1[-1,]
mzb1_1 <- apply(mzb1, 2, as.numeric)
rownames(mzb1_1) <- rownames(mzb1)
mzb1 <- mzb1_1
mzb1sort <- sortMzByRt(mzb1)
rt1 <- mzb1sort[, "RT"]
#MZB2
mzb2 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_wnorm_2.csv", row.names = 1, stringsAsFactors = FALSE)
mzb2 <- mzb2[-1,]
mzb2_2 <- apply(mzb2, 2, as.numeric)
rownames(mzb2_2) <- rownames(mzb2)
mzb2 <- mzb2_2
mzb2sort <- sortMzByRt(mzb2)
rt2 <- mzb2sort[, "RT"]
#a <- hist(rt1, breaks = seq(trunc(min(rt1)), trunc(max(rt1))+1, length.out = 4000))
myRTth <- 1
length(mzb1sort[pointDisc > myRTth, "MZ"])
sortMzByRt <- function(data)
{
mzs <- trunc(as.numeric(regmatches(rownames(data), regexpr("\\d+(\\.\\d+)?",rownames(data), perl=TRUE)))*100)/100
rts <- as.numeric(substring(regmatches(rownames(data), regexpr("T\\d+(\\.\\d+)?",rownames(data), perl=TRUE)),2))
rtsOrder <- order(rts)
newdata <- data[rtsOrder,]
newdata <- cbind(newdata, RT= rts[rtsOrder])
newdata <- cbind(newdata, MZ= mzs[rtsOrder])
return(as.matrix(newdata))
}
#check elution order - zarovnani mezi mzb1 a mzb2
mydata <- read.csv("../experiments/mymatrix_2_monointerpolator.csv")
rt <- mydata$RT
mz <- mydata$MZ
gap <- mydata$GAP
elutionOrder <- vector()
elutionNum <- vector()
elutioNumZero <- vector()
elutionIndex <- vector()
elutionRT <- vector()
binSize <- 10
for(i in 1:length(rt))
{
if(!is.na(rt[i]))
{
rt[rt[i:length(rt)] < rt[i]+binSize]
id <- i + which(rt[i:length(rt)] < rt[i]+binSize)
elutionID <- i + which(mz[id] == mz[i])
if(length(elutionID) > 0)
{
elutionOrder <- append(elutionOrder, mz[i])
elutionRT <- append(elutionRT, rt[i])
elutionNum <- append(elutionNum, length(elutionID))
elutionIndex <- append(elutionIndex, i)
elutioNumZero <- append(elutioNumZero, sum(gap[i:elutionID] == 0))
rt[elutionID] <- NA
mz[elutionID] <- NA
}
}
}
#MZB1
mzb1 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_wnorm_1.csv", row.names = 1, stringsAsFactors = FALSE)
mzb1 <- mzb1[-1,]
mzb1_1 <- apply(mzb1, 2, as.numeric)
rownames(mzb1_1) <- rownames(mzb1)
mzb1 <- mzb1_1
mzb1sort <- sortMzByRt(mzb1)
rt1 <- mzb1sort[, "RT"]
#MZB2
mzb2 <- read.csv("/home/frantisek/BIOCEV/metaboDatasets/mzb1_parts/mzb1_wnorm_2.csv", row.names = 1, stringsAsFactors = FALSE)
mzb2 <- mzb2[-1,]
mzb2_2 <- apply(mzb2, 2, as.numeric)
rownames(mzb2_2) <- rownames(mzb2)
mzb2 <- mzb2_2
mzb2sort <- sortMzByRt(mzb2)
rt2 <- mzb2sort[, "RT"]
#a <- hist(rt1, breaks = seq(trunc(min(rt1)), trunc(max(rt1))+1, length.out = 4000))
nrow(mzb1)
nrow(mydata)
length(elutionRT)
elutionOrder
elutionRT
bin <- seq(trunc(min(rt1)), trunc(max(rt1))+1)
head(bin)
orig_h <- hist(rt1, breaks = bin)
multi_h <- hist(elutionRT, breaks = bin)
cor(orig_h$counts, multi_h$counts)
bin <- seq(trunc(min(elutionRT)), trunc(max(elutionRT))+6, by = 2)
head(bin)
orig_h <- hist(rt1, breaks = bin)
multi_h <- hist(elutionRT, breaks = bin)
cor(orig_h$counts, multi_h$counts)
mzb1_dist <- dist(rt1)
mzb1_dist_matrix <- as.matrix(mzb1_dist)
pointDisc <- rep(0, nrow(mzb1_dist_matrix))
for(i in 2:(nrow(mzb1_dist_matrix)-1))
{
pointDisc[i] <- min(mzb1_dist_matrix[i,c(i-1, i+1)])
}
pointDisc
plot(rt1, pointDisc, cex = 0.5, pch=20)
hist(pointDisc)
hist(log(pointDisc))
mzb2_dist <- dist(rt2)
mzb2_dist_matrix <- as.matrix(mzb2_dist)
pointDisc2 <- rep(0, nrow(mzb2_dist_matrix))
for(i in 2:(nrow(mzb2_dist_matrix)-1))
{
pointDisc2[i] <- min(mzb2_dist_matrix[i,c(i-1, i+1)])
}
pointDisc2
plot(rt2, pointDisc2, cex = 0.5, pch=20)
hist(pointDisc2)
hist(log(pointDisc2))
myRTth <- 1
length(mzb1sort[pointDisc > myRTth, "MZ"])
length(mzb2sort[pointDisc2 > myRTth, "MZ"])
length(intersect(mzb1sort[pointDisc > myRTth, "MZ"], mzb2sort[pointDisc2 > myRTth, "MZ"]))
nonEOS <- intersect(mzb1sort[pointDisc > myRTth, "MZ"], mzb2sort[pointDisc2 > myRTth, "MZ"])
nonEOS
#ktere jsou dostatecne daleko, ale doslo u nich k EOS u referencniho alignmentu
nonEOS[intersect(mzb1sort[pointDisc > myRTth, "MZ"], mzb2sort[pointDisc2 > myRTth, "MZ"]) %in% elutionOrder]
View(mzb2sort)
View(mzb1sort)
1000/60
